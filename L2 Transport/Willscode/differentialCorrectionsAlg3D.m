%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Use method of differential corrections%%%%%    to refine estimate of initial conditions%%%%%    corresponding to a Halo orbit%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [M0_nonlinear] = differentialCorrectionsAlg3D(M0, tol)        M1(4,1) = 1;    M1(6,1) = 1;        M0_ = M0; % save original initial state        check = 1e-3;    plotIt = 1;    indexDelta = 10;        errVel = sqrt(M1(4,1)^2+M1(6,1)^2);        while (errVel > tol)               errVel                % Integrate state and state transition matrix to point where Y changes        %    sign        ctr = 1;        t0 = 0;        tf = 2*pi;        errY = 1;        while (errY > tol)            opts = odeset('RelTol', 1e-15, 'AbsTol', 1e-18, 'MaxStep', 1/(10^ctr));            [t,z] = ode45('threeDimensional3BodyOrbitWithVariationalEq',[t0 tf],M0,opts);            if(plotIt==1)                plot3(z(:,1),z(:,2),z(:,3));            end            plotIt = 0;                               if(sign(z(2,2))>0)                signChangeLoc = min(find(z(:,2)<0));            else                signChangeLoc = min(find(z(:,2)>0));            end            [errY, i] = min([abs(z(signChangeLoc,2)), abs(z(signChangeLoc-1,2))]);            if((signChangeLoc-indexDelta-1)<0 || (signChangeLoc+indexDelta)>length(z(:,1)))                ctr=ctr+1;            else                if(i==1)                    t0 = t(signChangeLoc-indexDelta);                    tf = t(signChangeLoc+indexDelta);                    M0 = [z(signChangeLoc-indexDelta,1:6)', z(signChangeLoc-indexDelta,7:12)', z(signChangeLoc-indexDelta,13:18)', z(signChangeLoc-indexDelta,19:24)', z(signChangeLoc-indexDelta,25:30)', z(signChangeLoc-indexDelta,31:36)', z(signChangeLoc-indexDelta,37:42)'];                        M1 = [z(signChangeLoc,1:6)', z(signChangeLoc,7:12)', z(signChangeLoc,13:18)', z(signChangeLoc,19:24)', z(signChangeLoc,25:30)', z(signChangeLoc,31:36)', z(signChangeLoc,37:42)'];                        t1 = t(signChangeLoc);                else                    t0 = t(signChangeLoc-indexDelta-1);                    tf = t(signChangeLoc+indexDelta-1);                    M0 = [z(signChangeLoc-indexDelta-1,1:6)', z(signChangeLoc-indexDelta-1,7:12)', z(signChangeLoc-indexDelta-1,13:18)', z(signChangeLoc-indexDelta-1,19:24)', z(signChangeLoc-indexDelta-1,25:30)',  z(signChangeLoc-indexDelta-1,31:36)',  z(signChangeLoc-indexDelta-1,37:42)'];                        M1 = [z(signChangeLoc-1,1:6)', z(signChangeLoc-1,7:12)', z(signChangeLoc-1,13:18)', z(signChangeLoc-1,19:24)', z(signChangeLoc-1,25:30)', z(signChangeLoc-1,31:36)', z(signChangeLoc-1,37:42)'];                        t1 = t(signChangeLoc-1);                end                ctr = ctr + 1;            end     end    plotIt = 1;    %delt_v = inv([M1(1,2), M1(1,6); M1(5,2), M1(5,6)])*[M1(1,1); M1(5,1)];    Xdot = threeDimensional3BodyOrbitRotatingFrame(1,M1(:,1));    delt_v = inv([M1(2,2) M1(2,6) M1(1,5); M1(4,2) M1(4,6), Xdot(4); M1(6,2) M1(6,6) Xdot(6)])*[0; M1(4,1); M1(6,1)];    M0_(1,1) = M0_(1,1) - delt_v(1,1);    M0_(5,1) = M0_(5,1) - delt_v(2,1);    M0 = M0_;       errVel = sqrt(M1(4,1)^2 + M1(6,1)^2);        end        M0_nonlinear = M0;end